version: 2.1
orbs:
  node: circleci/node@4.2.1
jobs:
  test-backend:
    machine:
      docker_layer_caching: false
    branches:
    steps:
      - checkout
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose up -d --build"
      - run:
          name: "Tear Down Django API Service"
          command: "cd tdrs-backend; docker-compose down "
      - run:
          name: "Test: Run Unit Tests And Create Code Coverage Report"
          command: "cd tdrs-backend; docker-compose run --rm web sh -c \"pytest --cov-report=xml\""
      - run:
          name: "Upload Backend Coverage Report to CodeCov If On Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F main-backend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F dev-backend
            fi
      - run:
          name:  "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 .\""
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-backend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-backend/reports/owasp_report.html
  test-frontend:
    working_directory: ~/tdp-apps
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"
      - run: 
          name: "Install Node.JS"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v12.18
            nvm alias default v12.18
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - node/install-yarn
      - node/install-packages:
          app-dir: tdrs-frontend
          cache-path: ~/.cache
          pkg-manager: yarn
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"
      - run:
          name: "Run Pa11y Accessibility Tests"
          command: "cd tdrs-frontend; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - run:
          name: "Upload Frontend Coverage Report to CodeCov If Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F main-frontend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F dev-frontend
            fi
      - run:
          name: "Run Cypress Integration Tests"
          command: "cd tdrs-frontend; yarn cy:run:ci"
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-frontend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-frontend/reports/owasp_report.html
  deploy:
    working_directory: ~/tdp-deploy
    docker:
      - image: circleci/python:3.8
        user : root
    steps:
      - setup_remote_docker:
         docker_layer_caching: false
      - checkout
      - run:
          name: 'Ensure sudo is installed, otherwise install it.'
          command: "./scripts/sudo-check.sh"
      - run:
          name: 'Ensure cf cli is installed, otherwise install it.'
          command: "./scripts/cf-check.sh"
      - run:
          name: "Log Into Docker"
          command: "echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin"
      - run:
          name: "Setup DockerHub tag name"
          command: |
            # Docker will reject tag names that include the literal `/` character
            # To work around this we replace that character in the CIRCLE_BRANCH name
            # and expose that to future steps via CircleCI Bash Environment
            echo "export DOCKER_TAG=`echo $CIRCLE_BRANCH | tr / -`" >> $BASH_ENV
      - run:
          name:  "Build Backend Docker image"
          command: "cd tdrs-backend; docker build -t lfrohlich/tdp-backend:$DOCKER_TAG . -f ./docker/Dockerfile.dev"
      - run:
          name:  "Push Backend Image to Docker Hub"
          command: "docker push lfrohlich/tdp-backend:$DOCKER_TAG"
      - run:
          name:  "Build Frontend Docker image"
          command: |
            # In order to support deploying to different environments we need
            # to specify which Dockerfile gets used based on the current branch
            if [ "$CIRCLE_BRANCH" == "raft-tdp-main" ]; then
              DOCKERFILE="Dockerfile.staging"
            else
              DOCKERFILE="Dockerfile.dev"
            fi

            cd tdrs-frontend
            docker build -t lfrohlich/tdp-frontend:$DOCKER_TAG . -f $DOCKERFILE
      - run:
          name:  "Push Frontend Image to Docker Hub"
          command: "docker push lfrohlich/tdp-frontend:$DOCKER_TAG"
      - run:
          name: "Deploy to Cloud.gov"
          command: |
            # Map certain branches to spaces, otherwise default to the Development space.
            # This lets you have dev/staging/main branches that automatically go to the right place.
            # NOTE: Only branches specified in the workflows at the bottom of this file will get
            #       automatically deployed on merge.
            export DOCKER_IMAGE_BACKEND="lfrohlich/tdp-backend:$DOCKER_TAG"
            export DOCKER_IMAGE_FRONTEND="lfrohlich/tdp-frontend:$DOCKER_TAG"
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              export CF_SPACE="tanf-prod"
              export CF_USERNAME="$CF_USERNAME_PROD"
              export CF_PASSWORD="$CF_PASSWORD_PROD"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_PROD"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_PROD"
            elif [ "$CIRCLE_BRANCH" == "staging" ] ; then
              export CF_SPACE="tanf-staging"
              export CF_USERNAME="$CF_USERNAME_STAGING"
              export CF_PASSWORD="$CF_PASSWORD_STAGING"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_STAGING"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_STAGING"
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              export CF_SPACE="tanf-dev"
              export CF_USERNAME="$CF_USERNAME_DEV"
              export CF_PASSWORD="$CF_PASSWORD_DEV"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_VENDOR_STAGING"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_VENDOR_STAGING"
            else
              export CF_SPACE="tanf-dev"
              export CF_USERNAME="$CF_USERNAME_DEV"
              export CF_PASSWORD="$CF_PASSWORD_DEV"
              export CGHOSTNAME_BACKEND="$CGHOSTNAME_BACKEND_DEV"
              export CGHOSTNAME_FRONTEND="$CGHOSTNAME_FRONTEND_DEV"
            fi
            if [ -z "$CF_ORG" ] ; then
              echo CF_ORG not set, aborting
              exit 1
            fi

            cf api https://api.fr.cloud.gov
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o $CF_ORG -s "$CF_SPACE"

            # Deploy ClamAV REST server
            # First delete the existing implementation of clamav-rest so we don't exhaust memory quota
            cf delete -r clamav-rest -f
            # NOTE: docker-backend is unused by clamav-rest but is needed to prevent an error when calling cf push
            cf push clamav-rest -f tdrs-backend/manifest.yml --var docker-backend=null --var cf-space=$CF_SPACE

            # Deploy frontend and backend applications
            ./deploy-cloudgov-docker.sh rolling test $CGHOSTNAME_BACKEND $CGHOSTNAME_FRONTEND $DOCKER_IMAGE_BACKEND $DOCKER_IMAGE_FRONTEND $CIRCLE_BRANCH $CF_SPACE

            # Enable direct communication over internal routes between backend and clamav-rest containers
            cf add-network-policy $CGHOSTNAME_BACKEND clamav-rest -s $CF_SPACE -o $CF_ORG --protocol tcp --port 9000
workflows:
  build-and-test:
    jobs:
      - test-backend
      - test-frontend
      - deploy:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only:
                - raft-tdp-main
                - raft-review
