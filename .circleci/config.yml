version: 2.1
orbs:
  node: circleci/node@4.2.1
commands:
  set-environment:
    parameters:
      env:
        default: "DEV"
        type: "string"
    steps:
      - run: |
          CF_SPACE=$CF_SPACE_<<parameters.env>>
          CF_USERNAME=$CF_USERNAME_<<parameters.env>>
          CF_PASSWORD=$CF_PASSWORD_<<parameters.env>>
          CGHOSTNAME_FRONTEND=$CGHOSTNAME_FRONTEND_<<parameters.env>>
          CGHOSTNAME_BACKEND=$CGHOSTNAME_BACKEND_<<parameters.env>>
  deploy-frontend:
    parameters:
      deploy-strategy:
        default: "rolling"
        type: string
      deploy-env:
        default: "staging"
        type: string
      backend-hostname:
        default: "https://tdp-backend.app.cloud.gov/"
        type: string
      frontend-hostname:
        default: "https://tdp-frontend.app.cloud.gov/"
        type: string
    steps:
      - run: |
          bash ./scripts/deploy-frontend.sh \
            <<parameters.deploy-strategy>> \
            <<parameters.deploy-env>> \
            <<parameters.frontend-hostname>> \
            <<parameters.backend-hostname>> 
  deploy-backend:
    parameters:
      deploy-strategy:
        default: "rolling"
        type: string
      deploy-env:
        default: "staging"
        type: string
      backend-hostname:
        default: ""
        type: string
    steps:
      - run: |
          bash ./scripts/deploy-backend.sh \
            <<parameters.deploy-strategy>> \
            <<parameters.deploy-env>> \
            <<parameters.backend-hostname>> 
  login-cloud-dot-gov:
    - run: |
        cf api https://api.fr.cloud.gov
        cf auth "$CF_USERNAME" "$CF_PASSWORD"
        cf target -o $CF_ORG -s "$CF_SPACE"
jobs:
  test-backend:
    machine:
      docker_layer_caching: false
    branches:
    steps:
      - checkout
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"
      - run:
          name: "Test: Build and Spin-up Django API Service"
          command: "cd tdrs-backend; docker-compose up -d --build"
      - run:
          name: "Tear Down Django API Service"
          command: "cd tdrs-backend; docker-compose down "
      - run:
          name: "Test: Run Unit Tests And Create Code Coverage Report"
          command: "cd tdrs-backend; docker-compose run web sh -c \"pytest && pytest --cov-report=xml\""
      - run:
          name: "Upload Backend Coverage Report to CodeCov If On Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F main-backend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-backend; bash <(curl -s https://codecov.io/bash)  -f ./coverage.xml -F dev-backend
            fi
      - run:
          name:  "Test: Execute Python Linting Test"
          command: "cd tdrs-backend; docker-compose run --rm web bash -c \"flake8 .\""
      - run:
          name:  "Test: Execute Python OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-backend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-backend/reports/owasp_report.html
  test-frontend:
    working_directory: ~/tdp-apps
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: 'Ensure docker-compose exists,otherwise install it.'
          command: "./scripts/docker-compose-check.sh"
      - run: 
          name: "Install Node.JS"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v12.18
            nvm alias default v12.18
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - node/install-yarn
      - node/install-packages:
          app-dir: tdrs-frontend
          cache-path: ~/.cache
          pkg-manager: yarn
      - run:
          name: "Run ESLint"
          command: "cd tdrs-frontend; yarn lint"
      - run:
          name: "Run Pa11y Accessibility Tests"
          command: "cd tdrs-frontend; yarn test:accessibility"
      - run:
          name: "Run Jest Unit Tests"
          command: "cd tdrs-frontend; yarn test:ci"
      - run:
          name: "Upload Frontend Coverage Report to CodeCov If Target Branch"
          command: |
            if [ "$CIRCLE_BRANCH" == "main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F main-frontend
            elif [ "$CIRCLE_BRANCH" == "raft-tdp-main" ] ; then
              cd tdrs-frontend; bash <(curl -s https://codecov.io/bash)  -f ./coverage/lcov.info -F dev-frontend
            fi
      - run:
          name: "Run Cypress Integration Tests"
          command: "cd tdrs-frontend; yarn cy:run:ci"
      - run:
          name:  "Test: Execute Frontend  OWASP ZAP Vulnerability Scan"
          command: "cd tdrs-frontend; ./zap-scanner.sh"
      - store_artifacts:
          path: tdrs-frontend/reports/owasp_report.html
  deploy-dev:
    working_directory: ~/tdp-deploy
    steps:
      - checkout
      - run:
          name: 'Ensure sudo is installed, otherwise install it.'
          command: "./scripts/sudo-check.sh"
      - run:
          name: 'Ensure cf cli is installed, otherwise install it.'
          command: "./scripts/cf-check.sh"
      - set-environment
      - login-cloud-dot-dov
      - deploy-frontend
      - deploy-backend
workflows:
  build-and-test:
    jobs:
      - test-backend
      - test-frontend
      - deploy-dev:
          requires:
            - test-backend
            - test-frontend
          filters:
            branches:
              only:
                - raft-review
